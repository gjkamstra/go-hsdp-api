// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// hsdp.toml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hsdpToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4d\x6f\xdb\x38\x10\x3d\xaf\x7e\xc5\x6c\x7c\x5d\xbb\xe8\xe6\x16\xa0\x07\x37\x31\xd2\xa0\xdd\xa4\xb0\x53\x14\x8b\x45\xb1\x18\x53\x23\x89\xa8\x44\x0a\xfc\xb0\xe3\x7f\xbf\xa0\x3e\x62\xc9\x92\x2c\xaa\x31\xb0\x37\x9b\xe2\xbc\x99\xf7\x66\x38\x1c\x69\x06\xcf\x09\xd7\xc0\x35\x20\xc4\xa9\xdc\x62\x0a\x8a\x62\xae\x8d\x3a\x40\x24\x15\xe4\x76\x9b\x72\x06\x9f\x36\x77\x5f\x41\x93\xda\x71\x46\x3a\x98\x01\x93\xc2\x20\x17\x5c\xc4\x90\x49\x6d\x40\x1b\x34\x9c\xb9\xe5\x88\xc7\x56\xa1\xe1\x52\x2c\xe0\xc1\x68\xc8\x90\x0b\xc8\xad\xca\xa5\x26\xe7\xc6\x48\x08\x66\xa0\x28\xb4\x8c\xda\xfb\x21\x47\x85\x19\x19\x52\x1a\x50\x84\x10\x2a\xbe\x23\x40\x6b\x64\x56\x3e\x97\x11\x98\x84\x9c\x79\x9e\xa2\x89\xa4\xca\x20\xb2\xca\x24\xa4\x60\x7b\x80\x04\x77\x2e\x1c\x84\xc4\x66\x28\x0a\x84\x0c\x59\xc2\x05\x81\x22\x0c\x71\x9b\x12\x68\x69\x15\x23\x90\x51\x41\x21\xcb\xa4\x18\x0c\x21\x98\x39\x47\x1f\x29\x92\x8a\xc0\x6a\x07\xcd\x0d\xa0\x86\x83\xb4\xea\x08\x04\x46\x59\x93\x40\x9e\x12\xea\x8a\x8f\xca\xdc\xce\x04\x1d\x84\x8b\x97\x5e\x72\x62\x86\x42\xd8\x61\x6a\x49\x2f\x82\x59\x30\x83\x65\xaa\xa5\xdb\x16\x4b\xd2\xb0\xe7\x26\x91\xd6\x80\xc6\x03\x17\xf1\x1f\xb0\xb5\x06\xf6\x04\x7b\x9e\xa6\x6e\xad\x70\x2c\x0e\x7b\x3c\xdc\x04\x33\x78\x30\x4e\xc6\x22\x0a\x45\x3a\x97\x42\xf3\x2d\x4f\xcd\xc1\x29\x4b\x42\x5b\xe5\xc2\x50\x8a\x98\x39\xe1\x26\x23\xc7\xa8\x30\x0c\x29\x4f\xe5\x21\x23\x61\xaa\x70\x1e\x22\xf7\x00\x74\x2e\x0d\x90\x52\x52\x69\x90\x0a\xb8\x60\x32\xcb\x53\x32\x04\x5c\x38\xbd\x2b\x91\x4a\xb2\x0a\xb9\x26\x40\x07\xfa\x75\xbd\x80\xe7\x04\xc5\x4f\xfd\x7b\x01\x77\x47\x11\x17\xdc\x6d\xd6\x37\xc5\xc2\x9a\x62\x67\x39\x77\x55\x46\x32\x56\x98\x27\x9c\x55\xb5\x26\x05\xec\x13\x52\xf4\x5a\x5f\x80\x8a\xaa\x10\x29\x0c\x66\xb0\x12\x3b\xae\xa4\x70\xe1\x16\x08\xda\x60\x4c\x85\x68\x5c\x0c\x00\x1a\x09\xc8\x43\x70\xa5\x97\xa0\xa6\xb0\xc1\xd8\xc5\xbb\x29\x3d\x15\x68\x4c\x0a\x6d\xb3\xaa\x3c\x22\xb3\xc7\x63\x24\x4e\x18\xa1\x0d\x8a\x6a\xab\xce\x89\xf1\x88\xb3\x26\x9a\x8c\xdc\x83\x7a\x7f\x30\x83\x4f\x9c\x14\x2a\x96\x1c\x80\x5e\xd0\xa9\x57\x2a\xb0\x42\x65\x92\x60\x06\x50\x6b\x61\xf5\x9c\x50\x9b\x62\x09\xea\x88\xaa\x7f\x00\x2c\xaa\x7e\x36\xc9\xb3\x94\x93\x30\x73\x43\xaf\x66\x5d\x43\x00\x8e\x59\x30\xfb\x0d\x80\x87\x59\x63\x95\xa1\x32\x94\xb6\x41\x29\x13\x06\x72\x25\x43\xcb\x5c\xae\xc6\x30\x8f\xff\x86\x91\x8b\x85\x50\xbd\xfe\x6b\x32\x26\x3b\xdf\x1f\x43\xff\x45\x62\x03\x41\x94\xc7\xed\xe2\xdc\xf4\x35\x53\x45\x0d\x06\x33\x78\x24\x6d\x5c\x1b\xd0\x07\x61\xf0\xe5\x06\xfe\x29\x6b\x6d\x41\x47\x22\x8b\xaa\x10\x16\xbc\x2a\x9b\x1f\x45\xee\x37\x75\x61\x33\x14\xb0\x25\x30\x9c\xc2\xa2\x44\xeb\x72\x95\x0a\x50\x40\x03\x28\x98\xc1\x77\x02\x74\x4d\x02\x85\xe1\x8c\xe7\x68\xa8\x6e\xd0\xc7\x73\x62\x40\xcb\x8c\x20\x97\xbc\x30\x59\x95\x05\x57\xd6\x64\x05\xbd\x95\x56\x84\xb5\xc9\x0d\xdc\xa6\xd2\x86\x10\xb9\x45\x75\x38\x35\x21\xc1\x77\x75\x4a\x4e\xec\x1e\x96\x7f\x05\x8d\x83\xd3\x86\xa9\x95\xa8\x4a\xfa\x55\x05\x16\xfd\x08\xac\x4a\xe1\x03\x5c\x25\xc6\xe4\xfa\xe6\xdd\x3b\xcc\xf9\x82\x39\xe3\x45\xce\x22\x97\xef\x05\x93\xd9\x55\x10\xca\xe2\x9e\xf8\x00\x57\x35\x46\x9e\xf0\x94\xe7\x7a\x9e\x10\xa6\x26\xd1\x96\x1b\x2a\xb7\xbe\xca\x5e\x56\xd3\x98\x33\xb2\xef\x17\x79\xa2\xc3\xfc\xd4\x51\x6d\x3f\xea\x48\xe3\xfb\x31\x27\xfa\xa0\x8b\x6d\x85\x1f\x2e\x9b\x6e\x5a\xcb\x35\x24\xe6\xc8\xae\x7d\x40\x31\xbf\xee\x03\x6d\x2d\x37\xd2\x72\xf7\x74\xfb\x79\xb5\x9e\xaf\x57\xf7\x0f\x9b\xe7\xf5\xdf\x83\x89\x09\x25\xfb\x49\x6a\x5e\xdf\xf4\x3f\x82\xc4\x5d\xe2\x1f\xe0\xaa\x7c\xb0\x10\x7d\x41\x9f\x0a\x3e\x06\xe2\x94\xef\x80\x34\xc5\x1c\x03\xf0\x90\x6e\x0c\x62\x48\xa8\xdb\xa7\xc7\xcd\xd3\x97\xd5\x70\xe5\x4a\xa1\x65\x4a\x9d\xbc\x54\xeb\x7e\x02\x8d\x81\x8c\x0a\x34\x06\xe0\x53\x5b\x23\x10\x43\x02\x7d\x5b\x2e\x07\xc5\xb1\x88\x1d\x3c\x8b\xd8\x77\xae\x87\xa4\x19\x82\x38\x39\xad\x7d\xa2\x0c\x99\x76\xce\x60\xbf\x20\xe7\xcc\x87\xc4\x70\xcd\xef\x54\x0c\x12\xbb\x45\xe3\xda\x3a\x76\x7e\xcc\x3a\xf8\x1c\xb3\x79\x73\xef\x68\x8f\xe3\x98\xfd\xfb\x66\x8c\xb0\x8b\x11\x4e\xc4\xe8\x23\xed\xee\xd4\x51\xb6\xaf\x6a\xff\x22\x53\x7f\xfb\x7e\x96\xde\xf6\xa7\x05\xfa\x96\xb4\x8e\xde\x28\x23\x64\xc7\xed\xc7\x53\xea\x7d\xab\x35\x09\x4f\x4a\xe9\xff\xc5\xd2\xdb\xbe\xd9\x34\xde\x92\xce\x56\x33\xf1\x38\x91\xed\xfd\xe3\xa9\xea\x6d\x56\x75\xd0\x93\x52\xe2\x13\x69\xff\xde\xf3\x52\x9f\x69\xa7\x93\x63\x6c\xf5\xd6\x91\x18\xdb\x7b\xcf\xc7\xd8\xda\xdb\xd7\xaf\x42\xda\x8d\x06\x19\xd2\x8e\x52\x99\x17\x23\xfc\xaf\xb6\xac\x69\x18\xfd\xa4\x26\x61\x34\x2f\xa8\xbb\x09\x17\x54\xd8\xa3\xc1\xe5\x2f\x86\x01\x2f\x97\x6f\xcc\x1e\x74\x2e\xd0\x14\x47\xe8\x5c\xa6\x29\x79\x50\x99\xd0\x34\x46\x42\x9e\x74\xb8\x47\xb0\xa6\x1d\xc2\x01\xb0\x69\xc5\xdf\x1c\xe6\x97\xeb\xe7\xd5\x97\xe1\x59\xbe\xf8\x3e\x71\x7c\x35\x28\xff\xcf\xdd\x08\x5f\x4d\xac\xdd\x81\xb3\x33\xca\xf7\x63\xb8\x71\x75\x10\xa3\x35\xc9\xf7\xdb\xeb\xbe\x18\x1a\xcc\xee\x97\xcf\xab\xef\xcb\xe1\xf7\xb8\x18\x0d\xed\xb1\xf1\xda\x13\xef\x0b\x5e\xbd\x2f\xbc\x27\x0f\x86\xa8\xf6\x61\x0e\xbf\x44\x67\xd4\x8f\xda\x24\xdf\x87\xa8\x87\xa2\xd4\xfd\x78\xed\x21\xbe\x0f\xb1\xdc\xd1\x8b\xd9\x79\xd4\x90\x78\x73\x7d\xbb\x5e\xdd\x6d\xbc\xdb\x67\xf9\x45\x48\x77\x2a\xb8\x5a\xbf\x70\x1b\x1d\xf3\x76\xf1\x76\x3a\x85\xde\xdb\xdb\xaa\x2f\xbd\x51\x4f\x8d\x84\x7e\x5a\x6e\xbc\xd9\x26\xd8\xf5\x9d\xe0\x44\x96\xcd\x4e\x74\xb7\x9e\x6f\x9e\xbf\x5d\xf7\x26\x56\xa3\x08\xb7\xf2\xe5\xd8\x13\x42\x35\xd7\xc6\x5e\x77\xdf\xcd\xab\x07\xf3\xda\x62\xca\x28\xf0\xe5\xe9\xfe\xfe\xe1\xf1\xde\x5b\x82\x54\xc6\x31\x17\x71\x27\x88\x54\xba\x65\xd2\x46\xaa\x3f\x2f\x9c\x75\x1f\x97\xfe\x6e\xc6\x0e\xec\x64\x82\x6f\x3f\xb5\x5e\x04\xbd\xdd\x9c\x1b\x19\x26\x93\xf3\x9f\x1f\xbc\x48\x4c\x19\x22\xbc\x00\x87\x3e\xc1\x7c\x7e\xf8\xb8\x7c\x5c\x7a\x57\xf5\x4f\xbe\x45\xd1\xfd\xd0\x53\x2e\x5f\xb8\x9c\xcf\xfa\xba\x5c\x1d\xfb\x53\x7a\x7b\x01\x9f\xa7\x74\x91\xca\xf5\xa7\xe3\x5f\xb2\xe7\xc3\x9e\x52\xab\xe7\x91\x5a\x45\xfa\x5f\x00\x00\x00\xff\xff\xd4\xaa\x23\x8e\x42\x1f\x00\x00")

func hsdpTomlBytes() ([]byte, error) {
	return bindataRead(
		_hsdpToml,
		"hsdp.toml",
	)
}

func hsdpToml() (*asset, error) {
	bytes, err := hsdpTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hsdp.toml", size: 8002, mode: os.FileMode(420), modTime: time.Unix(1601310136, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hsdp.toml": hsdpToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hsdp.toml": &bintree{hsdpToml, map[string]*bintree{}},
}}
