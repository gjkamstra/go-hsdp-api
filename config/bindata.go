// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// hsdp.toml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hsdpToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4d\x6f\xdb\x38\x10\x3d\xaf\x7e\xc5\x6c\x7c\x5d\xbb\xe8\xe6\x16\xa0\x07\x37\x31\xd2\xa0\xdd\xa4\xb0\x53\x14\x8b\x45\xb1\x18\x53\x23\x89\xa8\x44\x0a\xfc\xb0\xe3\x7f\xbf\xa0\x3e\x62\xc9\x92\x2c\xaa\x31\xb0\x37\x9b\xe2\xbc\x99\xf7\x66\x38\x43\x69\x06\xcf\x09\xd7\xc0\x35\x20\xc4\xa9\xdc\x62\x0a\x8a\x62\xae\x8d\x3a\x40\x24\x15\xe4\x76\x9b\x72\x06\x9f\x36\x77\x5f\x41\x93\xda\x71\x46\x3a\x98\x01\x93\xc2\x20\x17\x5c\xc4\x90\x49\x6d\x40\x1b\x34\x9c\xb9\xe5\x88\xc7\x56\xa1\xe1\x52\x2c\xe0\xc1\x68\xc8\x90\x0b\xc8\xad\xca\xa5\x26\xe7\xc6\x48\x08\x66\xa0\x28\xb4\x8c\xda\xfb\x21\x47\x85\x19\x19\x52\x1a\x50\x84\x10\x2a\xbe\x23\x40\x6b\x64\x56\x3e\x97\x11\x98\x84\x9c\x79\x9e\xa2\x89\xa4\xca\x20\xb2\xca\x24\xa4\x60\x7b\x80\x04\x77\x2e\x1c\x84\xc4\x66\x28\x0a\x84\x0c\x59\xc2\x05\x81\x22\x0c\x71\x9b\x12\x68\x69\x15\x23\x90\x51\x41\x21\xcb\xa4\x18\x0c\x21\x98\x39\x47\x1f\x29\x92\x8a\xc0\x6a\x07\xcd\x0d\xa0\x86\x83\xb4\xea\x08\x04\x46\x59\x93\x40\x9e\x12\xea\x8a\x8f\xca\xdc\xce\x04\x1d\x84\x8b\x97\x5e\x72\x62\x86\x42\xd8\x61\x6a\x49\x2f\x82\x59\x30\x83\x65\xaa\xa5\xdb\x16\x4b\xd2\xb0\xe7\x26\x91\xd6\x80\xc6\x03\x17\xf1\x1f\xb0\xb5\x06\xf6\x04\x7b\x9e\xa6\x6e\xad\x70\x2c\x0e\x7b\x3c\xdc\x04\x33\x78\x30\x4e\xc6\x22\x0a\x45\x3a\x97\x42\xf3\x2d\x4f\xcd\xc1\x29\x4b\x42\x5b\xe5\xc2\x50\x8a\x98\x39\xe1\x26\x23\xc7\xa8\x30\x0c\x29\x4f\xe5\x21\x23\x61\xaa\x70\x1e\x22\xf7\x00\x74\x2e\x0d\x90\x52\x52\x69\x90\x0a\xb8\x60\x32\xcb\x53\x32\x04\x5c\x38\xbd\x2b\x91\x4a\xb2\x0a\xb9\x26\x40\x07\xfa\x75\xbd\x80\xe7\x04\xc5\x4f\xfd\x7b\x01\x77\x47\x11\x17\xdc\x6d\xd6\x37\xc5\xc2\x9a\x62\x67\x39\x77\x55\x46\x32\x56\x98\x27\x9c\x55\xb5\x26\x05\xec\x13\x52\xf4\x5a\x5f\x80\x8a\xaa\x10\x29\x0c\x66\xb0\x12\x3b\xae\xa4\x70\xe1\x16\x08\xda\x60\x4c\x85\x68\x5c\x0c\x00\x1a\x09\xc8\x43\x70\xa5\x97\xa0\xa6\xb0\xc1\xd8\xc5\xbb\x29\x3d\x15\x68\x4c\x0a\x6d\xb3\xaa\x3c\x22\xb3\xc7\x63\x24\x4e\x18\xa1\x0d\x8a\x6a\xab\xce\x89\xf1\x88\xb3\x26\x9a\x8c\xdc\x83\x7a\x7f\x30\x83\x4f\x9c\x14\x2a\x96\x1c\x80\x5e\xd0\xa9\x57\x2a\xb0\x42\x65\x92\x60\x06\x50\x6b\x61\xf5\x9c\x50\x9b\x62\x09\xea\x88\xaa\x7f\x00\x2c\xaa\x7e\x36\xc9\xb3\x94\x93\x30\x73\x43\xaf\x66\x5d\x43\x00\x8e\x59\x30\xfb\x0d\x80\x87\x59\x63\x95\xa1\x32\x94\xb6\x41\x29\x13\x06\x72\x25\x43\xcb\x5c\xae\xc6\x30\x8f\xff\x86\x91\x8b\x85\x50\xbd\xfe\x6b\x32\x26\x3b\xdf\x1f\x43\xff\x45\x62\x03\x41\x94\xc7\xed\xe2\xdc\xf4\x35\x53\x45\x0d\x06\x33\x78\x24\x6d\x5c\x1b\xd0\x07\x61\xf0\xe5\x06\xfe\x29\x6b\x6d\x41\x47\x22\x8b\xaa\x10\x16\xbc\x2a\x9b\x1f\x45\xee\x37\x75\x61\x33\x14\xb0\x25\x30\x9c\xc2\xa2\x44\xeb\x72\x95\x0a\x50\x40\x03\x28\x98\xc1\x77\x02\x74\x4d\x02\x85\xe1\x8c\xe7\x68\xa8\x6e\xd0\xc7\x73\x62\x40\xcb\x8c\x20\x97\xbc\x30\x59\x95\x05\x57\xd6\x64\x05\xbd\x95\x56\x84\xb5\xc9\x0d\xdc\xa6\xd2\x86\x10\xb9\x45\x75\x38\x35\x21\xc1\x77\x75\x4a\x4e\xec\x1e\x96\x7f\x05\x8d\x83\xd3\x86\xa9\x95\xa8\x4a\xfa\x55\x05\x16\xfd\x08\xac\x4a\xe1\x03\x5c\x25\xc6\xe4\xfa\xe6\xdd\x3b\xcc\xf9\x82\x39\xe3\x45\xce\x22\x97\xef\x05\x93\xd9\x55\x10\xca\x62\x4e\x7c\x80\xab\x1a\x23\x4f\x78\xca\x73\x3d\x4f\x08\x53\x93\x68\xcb\x0d\x95\x5b\x5f\x65\x2f\xab\x69\xcc\x19\xd9\xf7\x8b\x3c\xd1\x61\x7e\xea\xa8\xb6\x1f\x75\xa4\xf1\xfd\x98\x13\x7d\xd0\xc5\xb6\xc2\x0f\x97\x4d\x37\xad\xe5\x1a\x12\x73\x64\xd7\x3e\xa0\x98\x5f\xf7\x81\xb6\x96\x1b\x69\xb9\x7b\xba\xfd\xbc\x5a\xcf\xd7\xab\xfb\x87\xcd\xf3\xfa\xef\xc1\xc4\x84\x92\xfd\x24\x35\xaf\x27\xfd\x8f\x20\x71\x43\xfc\x03\x5c\x95\x0f\x16\xa2\x2f\xe8\x53\xc1\xc7\x40\x9c\xf2\x1d\x90\xa6\x98\x63\x00\x1e\xd2\x8d\x41\x0c\x09\x75\xfb\xf4\xb8\x79\xfa\xb2\x1a\xae\x5c\x29\xb4\x4c\xa9\x93\x97\x6a\xdd\x4f\xa0\x31\x90\x51\x81\xc6\x00\x7c\x6a\x6b\x04\x62\x48\xa0\x6f\xcb\xe5\xa0\x38\x16\xb1\x83\x67\x11\xfb\xce\xf5\x90\x34\x43\x10\x27\xa7\xb5\x4f\x94\x21\xd3\xce\x19\xec\x17\xe4\x9c\xf9\x90\x18\xae\xf9\x9d\x8a\x41\x62\xb7\x68\x8c\xad\x63\xe7\xc7\xac\x83\xcf\x31\x9b\x37\xf7\x8e\xf6\x38\x8e\xd9\xbf\x6f\xc6\x08\xbb\x18\xe1\x44\x8c\x3e\xd2\x6e\xa6\x8e\xb2\x7d\x55\xfb\x17\x99\xfa\xdb\xf7\xb3\xf4\xb6\x3f\x2d\xd0\xb7\xa4\x75\x74\xa2\x8c\x90\x1d\xb7\x1f\x4f\xa9\xf7\x54\x6b\x12\x9e\x94\xd2\xff\x8b\xa5\xb7\x7d\xb3\x69\xbc\x25\x9d\xad\x66\xe2\x71\x22\xdb\xfb\xc7\x53\xd5\xdb\xac\xea\xa0\x27\xa5\xc4\x27\xd2\xfe\xbd\xe7\xa5\x3e\xd3\x4e\x27\xc7\xd8\xea\xad\x23\x31\xb6\xf7\x9e\x8f\xb1\xb5\xb7\xaf\x5f\x85\xb4\x1b\x0d\x32\xa4\x1d\xa5\x32\x2f\xae\xf0\xbf\xda\xb2\xa6\x61\xf4\x93\x9a\x84\xd1\x1c\x50\x77\x13\x06\x54\xd8\xa3\xc1\xe5\x07\xc3\x80\x97\xcb\x37\x66\x0f\x3a\x17\x68\x8a\x23\x74\x2e\xd3\x94\x3c\xa8\x4c\x68\x1a\x23\x21\x4f\x3a\xdc\x23\x58\xd3\x0e\xe1\x00\xd8\xb4\xe2\x6f\x5e\xe6\x97\xeb\xe7\xd5\x97\xe1\xbb\x7c\xf1\x7d\xe2\xf8\x6a\x50\xfe\x9f\xbb\x2b\x7c\x75\x63\xed\x5e\x38\x3b\x57\xf9\x7e\x0c\x77\x5d\x1d\xc4\x68\xdd\xe4\xfb\xed\x75\x5f\x0c\x0d\x66\xf7\xcb\xe7\xd5\xf7\xe5\xf0\x7b\x5c\x8c\x86\xf6\xd8\x78\xed\x89\xf7\x05\x2f\x0f\x46\x7d\xa6\x1e\xb7\xef\x3e\x33\xdd\xef\xb1\x7d\xef\xee\x33\x2c\x77\xf4\x53\xdf\x5c\xdf\xae\x57\x77\x1b\xef\xb6\x56\x7e\xa9\xd1\x9d\xca\xaa\xd6\x2f\xdc\xde\xc6\xbc\x5d\xbc\xcd\x4d\xa1\xf7\xf6\x76\xe7\x4b\x6f\xd4\x53\x23\xa1\x9f\x96\x1b\x6f\xb6\x09\x76\x7d\x27\x38\x91\x65\xb3\x43\xdc\xad\xe7\x9b\xe7\x6f\xd7\xbd\x89\xd5\x28\xc2\xad\x7c\x39\x9e\xd5\x50\xcd\xb5\xb1\xd7\xdd\x77\xe6\xea\xc1\xbc\xb6\x98\x32\xa2\xbf\x3c\xdd\xdf\x3f\x3c\xde\x7b\x4b\x90\xca\x38\xe6\x22\xee\x04\x91\x4a\xb7\x4c\xda\x48\xf5\xe7\x85\xb3\xee\xe3\xd2\xdf\xcd\xd8\x81\x9d\x4c\xf0\xed\xa7\xd6\x8b\xa0\xb7\x9b\x73\xa3\x7c\x32\x39\xff\xb9\xee\x45\x62\xca\x70\xf7\x02\x1c\xfa\x34\xf2\xf9\xe1\xe3\xf2\x71\xe9\x5d\xd5\x3f\xf9\x16\x45\xf7\x03\x4c\xb9\x7c\xe1\x72\x3e\xeb\xeb\x72\x75\xec\x4f\xe9\xed\x05\x7c\x9e\xd2\x45\x2a\xd7\x9f\x8e\x7f\xc9\x9e\x0f\x7b\x4a\xad\x9e\x47\x6a\x15\xe9\x7f\x01\x00\x00\xff\xff\xc9\x31\x39\xfc\xda\x1e\x00\x00")

func hsdpTomlBytes() ([]byte, error) {
	return bindataRead(
		_hsdpToml,
		"hsdp.toml",
	)
}

func hsdpToml() (*asset, error) {
	bytes, err := hsdpTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hsdp.toml", size: 7898, mode: os.FileMode(420), modTime: time.Unix(1601292077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hsdp.toml": hsdpToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hsdp.toml": &bintree{hsdpToml, map[string]*bintree{}},
}}
